name: Create and publish a Docker image, and deploy on server

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
    tags:
      - v*

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

env:
  IMAGE_NAME: MixusMinimax/angular-website
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the Container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extracts metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.5.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: angular-website
    permissions:
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the Container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy to Digital Ocean using ssh
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: $${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            IMAGE_ID=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            # Change all uppercase to lowercase
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
            # Strip git ref prefix from version
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            # Strip "v" prefix from tag name
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
            # Use Docker `latest` tag convention
            [ "$VERSION" == "${{ github.event.repository.default_branch }}" ] && VERSION=latest
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION

            if [ "$(docker ps -q -f name=$IMAGE_NAME)" ]; then
              docker rm -f $IMAGE_NAME
            fi

            docker pull $IMAGE_ID:$VERSION
            docker run -d \
            --restart always \
            --name $IMAGE_NAME \
            --publish 8080:80
            $IMAGE_ID:$VERSION